{"version":3,"sources":["GDriveAuthClient.js","googleIcon.js","GoogleSignInButton.js","Entry.js","EntriesTableChunk.js","EntriesTable.js","App.js","serviceWorker.js","index.js"],"names":["GDriveStates","LOADING","SIGNED_IN","SIGNED_OUT","FAILED","Object","freeze","gdriveAuthClient","Set","ondone","console","assert","length","script","document","createElement","async","src","body","appendChild","onload","onerror","loadGapi","a","window","gapi","Error","Promise","resolve","load","client","init","clientId","discoveryDocs","scope","isGapiLoaded","_updateSignInState","auth2","getAuthInstance","isSignedIn","listen","bind","log","_notifyStateChanged","listener","this","has","add","delete","addStateListener","state","removeStateListener","signIn","signOut","current_state","get","seal","active","style","marginRight","background","padding","borderRadius","width","height","xmlns","fill","fillRule","d","ButtonContent","children","paddingRight","fontWeight","paddingLeft","paddingTop","paddingBottom","buttonStyle","backgroundColor","display","alignItems","color","boxShadow","border","fontSize","fontFamily","cursor","disabledStyle","opacity","React","PureComponent","Entry","event","props","onLeftChanged","entry","key","target","value","onRightChanged","TextField","className","fullWidth","multiline","placeholder","variant","onChange","left","right","EntriesTableChunk","isVisible","isInitiallyVisible","createRef","IntersectionObserver","entries","isIntersecting","current","clientHeight","setState","threshold","rootMargin","observe","unobserve","ref","onMouseOver","onClick","EntriesTable","_","range","map","x","ColumnResizer","liveDrag","minWidth","gripInnerHtml","draggingClass","onResize","e","dispatchEvent","Event","removeEventListener","ResizeObserver","throttle","destroy","chunks","i","push","slice","chunkCounter","Container","chunk","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUACaA,EAAe,CAC1BC,QAAS,UACTC,UAAW,YACXC,WAAY,aACZC,OAAQ,UAEVC,OAAOC,OAAON,G,2DAsGDO,EAAmB,I,WAnE9B,aAAe,IAAD,2EAhCLP,EAAaC,UAgCR,gDA/BI,IAAIO,MAsGxB,SAAkBC,GAChBC,QAAQC,OAAwB,mBAAVF,GACtBC,QAAQC,OAAyB,IAAlBF,EAAOG,QACtB,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,OAAQ,EACfH,EAAOI,IAAM,oCACbH,SAASI,KAAKC,YAAYN,GAC1BA,EAAOO,OAASX,EAChBI,EAAOQ,QAAUZ,EA9Efa,CAAQ,sBAAC,sBAAAC,EAAA,kEAEAC,OAAOC,KAFP,sBAGG,IAAIC,MAAM,uBAHb,uBAMC,IAAIC,SAAQ,SAACC,GAAD,OAChBJ,OAAOC,KAAKI,KAAK,eAAgBD,MAP9B,uBAUCJ,OAAOC,KAAKK,OAAOC,KAAK,CAC5BC,SACE,2EACFC,cAAe,CACb,8DAEFC,MAAO,oDAhBJ,UAmBAC,IAnBA,sBAoBG,IAAIT,MAAM,iCApBb,OAuBL,EAAKU,qBAELZ,OAAOC,KAAKY,MACTC,kBACAC,WAAWC,OAAO,EAAKJ,mBAAmBK,KAAK,IA3B7C,yDA6BL/B,QAAQgC,IAAR,MACA,cAAI,GAAJ,GAAc1C,EAAaI,OAC3B,EAAKuC,sBA/BA,8E,6DA1BMC,GACflC,QAAQC,OAA0B,mBAAZiC,GACtBlC,QAAQC,OAA2B,IAApBiC,EAAShC,QACxBF,QAAQC,QAAQ,YAAAkC,KAAA,MAAqBC,IAAIF,IAEzC,YAAAC,KAAA,MAAqBE,IAAIH,K,0CAGPA,GAClBlC,QAAQC,OAA0B,mBAAZiC,GACtBlC,QAAQC,OAA2B,IAApBiC,EAAShC,QACxBF,QAAQC,OAAO,YAAAkC,KAAA,MAAqBC,IAAIF,IACxC,YAAAC,KAAA,MAAqBG,OAAOJ,K,kLAIf,IAAIjB,SAAQ,SAACC,GAKxB,EAAKqB,kBAJU,SAAXL,EAAYM,GACd,EAAKC,oBAAoBP,GACzBhB,EAAQsB,S,qKAtBZ,OAAO,YAAAL,KAAP,U,8CAmEAnC,QAAQC,OAAOwB,KACfX,OAAOC,KAAKY,MAAMC,kBAAkBc,W,gCAIpC1C,QAAQC,OAAOwB,KACKX,OAAOC,KAAKY,MAAMC,kBACxBe,Y,4CAGO,IAAD,4BACCR,KADD,WACpB,2BAA2C,EACzCD,EADyC,SAChC,YAAAC,KAAD,QAFU,iC,2CAOpBnC,QAAQC,OAAO,YAAAkC,KAAA,QAAgB7C,EAAaI,QAC5C,IAAIkD,GA8BN5C,QAAQC,OAAOwB,KACRX,OAAOC,KAAKY,MAAMC,kBAAkBC,WAAWgB,MA9BhDvD,EAAaE,UACbF,EAAaG,YACb,YAAA0C,KAAA,QAAgBS,IAClB,YAAAT,KAAA,MAAcS,EACdT,KAAKF,2B,MAoBX,SAASR,IACP,OAAOX,OAAOC,MAAQD,OAAOC,KAAKY,OAASb,OAAOC,KAAKK,OAfzDzB,OAAOmD,KAAKjD,G,oCC5GG,kBAAGkD,EAAH,EAAGA,OAAH,OACb,yBAAKC,MAAO,CAAEC,YAAa,GAAIC,WAAYH,EAAS,OAAS,OAAQI,QAAS,GAAIC,aAAc,IAC9F,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,MAAM,8BAChC,uBAAGC,KAAK,OAAOC,SAAS,WACtB,0BACEC,EAAE,gIACFF,KAAK,YAEP,0BAAME,EAAE,kHAAkHF,KAAK,YAC/H,0BACEE,EAAE,4HACFF,KAAK,YAEP,0BACEE,EAAE,8HACFF,KAAK,YAEP,0BAAMA,KAAK,OAAOE,EAAE,sB,2BCbtBC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,0BACEZ,MAAO,CACLa,aAAc,GACdC,WAAY,IACZC,YAAa,EACbC,WAAY,GACZC,cAAe,KAGhBL,IAIDM,EAAc,CAChBC,gBAAiB,OACjBC,QAAS,cACTC,WAAY,SACZC,MAAO,qBACPC,UAAW,+DACXpB,QAAS,EACTC,aAAc,EACdoB,OAAQ,wBACRC,SAAU,GACVX,WAAY,MACZY,WAAY,qBACZC,OAAQ,WAGNC,EAAgB,CAClBC,QAAS,I,2HAG6BC,IAAMC,c,uECpCjCC,EAAb,qQACmB,SAACC,GAChB,EAAKC,MAAMC,cAAc,EAAKD,MAAME,MAAMC,IAAKJ,EAAMK,OAAOC,UAFhE,0DAIoB,SAACN,GACjB,EAAKC,MAAMM,eAAe,EAAKN,MAAME,MAAMC,IAAKJ,EAAMK,OAAOC,UALjE,uDASI,OACE,4BACE,wBAAIF,IAAI,gBACN,qCACA,kBAACI,EAAA,EAAD,CACEC,UAAU,eACVC,WAAS,EACTC,WAAS,EACTC,YAAY,oBACZC,QAAQ,WACRC,SAAQ,YAAE5D,KAAF,MACRoD,MAAOpD,KAAK+C,MAAME,MAAMY,QAI5B,wBAAIX,IAAI,qBACN,0CACA,kBAACI,EAAA,EAAD,CACEC,UAAU,oBACVC,WAAS,EACTC,WAAS,EACTC,YAAY,0CACZC,QAAQ,WACRC,SAAQ,YAAE5D,KAAF,MACRoD,MAAOpD,KAAK+C,MAAME,MAAMa,cAjCpC,GAA2BnB,IAAMC,e,8GCDpBmB,EAAb,4MACE1D,MAAQ,CACN2D,YAAa,EAAKjB,MAAMkB,mBACxB9C,OAAQ,MAHZ,0DAMkBwB,IAAMuB,cANxB,0DAO0B,IAAIC,sBAC1B,SAACC,GACC,GAAI,EAAK/D,MAAM2D,YAAcI,EAAQ,GAAGC,eAAgB,CACtD,IAAIlD,EAAS,EAAKd,MAAM2D,UACpB,iCAAmBM,QAAQC,aAC3B,EAAKlE,MAAMc,OAEf,EAAKqD,SAAS,CACZR,UAAWI,EAAQ,GAAGC,eACtBlD,cAIN,CACEsD,UAAW,CAAC,EAAG,IAAM,GAAK,IAAM,GAChCC,WAAY,WAtBlB,0DA0B8B,WAC1B,EAAKF,SAAL,2BAAmB,EAAKnE,OAAxB,IAA+B2D,WAAW,QA3B9C,kEA+BI,YAAAhE,KAAA,MAA2B2E,QAAQ,YAAA3E,KAAA,MAAmBsE,WA/B1D,6CAkCI,YAAAtE,KAAA,MAA2B4E,UAAU,YAAA5E,KAAA,MAAmBsE,WAlC5D,+BAsCI,OACE,2BAAOO,IAAG,YAAE7E,KAAF,OACPA,KAAKK,MAAM2D,UACVhE,KAAK+C,MAAMtB,SAEX,4BACE,4BACE,yBACE8B,UAAU,cACVuB,YAAW,YAAE9E,KAAF,MACX+E,QAAO,YAAE/E,KAAF,MACPa,MAAO,CAAEM,OAAQnB,KAAKK,MAAMc,WAGhC,4BACE,yBACEoC,UAAU,cACVuB,YAAW,YAAE9E,KAAF,MACX+E,QAAO,YAAE/E,KAAF,MACPa,MAAO,CAAEM,OAAQnB,KAAKK,MAAMc,iBAzD5C,GAAuCwB,IAAMC,e,mMCMhCoC,EAAb,4MACE3E,MAAQ,CACN+D,QAASa,IAAEC,MAAM,EAAG,KAAMC,KAAI,SAACC,GAC7B,MAAO,CACLlC,IAAKkC,EACLvB,KACE,+HACFC,MAAOsB,EAAI,sSAPnB,0DAYczC,IAAMuB,cAZpB,0DAamB,OAbnB,0DAcoB,OAdpB,0DAgBmB,SAAChB,EAAKW,GACrB,EAAKW,SAAL,2BACK,EAAKnE,OADV,IAEE+D,QAAS,EAAK/D,MAAM+D,QAAQe,KAAI,SAACC,GAC/B,OAAIA,EAAElC,MAAQA,EAAY,2BAAKkC,GAAZ,IAAevB,SAC3BuB,WArBf,0DA0BoB,SAAClC,EAAKY,GACtB,EAAKU,SAAL,2BACK,EAAKnE,OADV,IAEE+D,QAAS,EAAK/D,MAAM+D,QAAQe,KAAI,SAACC,GAC/B,OAAIA,EAAElC,MAAQA,EAAY,2BAAKkC,GAAZ,IAAetB,UAC3BsB,WA/Bf,kEAoCuB,IAAD,OAClB,YAAApF,KAAA,MAAsB,IAAIqF,IAAc,YAAArF,KAAA,MAAesE,QAAS,CAC9DgB,UAAU,EACVC,SAAU,IACVC,cAAe,2BACfC,cAAe,WACfC,SAAU,SAACC,GASThH,OAAOiH,cAAc,IAAIC,MAAM,cAQnClH,OAAOmH,oBAAoB,SAAU,YAAA9F,KAAA,MAAoB0F,UACzD,YAAA1F,KAAA,MAAuB,IAAI+F,eACzBd,IAAEe,UAAS,WACT,cAAI,GAAJ,GAAoBN,aACnB,MAEL,YAAA1F,KAAA,MAAqB2E,QAAQ,YAAA3E,KAAA,MAAesE,WAjEhD,6CAqEI,YAAAtE,KAAA,MAAoBiG,UACpB,YAAAjG,KAAA,MAAqB4E,UAAU,YAAA5E,KAAA,MAAesE,WAtElD,+BA4EI,IAHQ,IAAD,OAEH4B,EAAS,GACJC,EAAI,EAAGA,EAAInG,KAAKK,MAAM+D,QAAQrG,OAAQoI,GAF7B,GAGhBD,EAAOE,KAAKpG,KAAKK,MAAM+D,QAAQiC,MAAMF,EAAGA,EAHxB,KAMlB,IAAIG,EAAe,EAEnB,OACE,kBAACC,EAAA,EAAD,KACE,2BAAOhD,UAAU,eAAesB,IAAG,YAAE7E,KAAF,OACjC,+BACE,4BACE,4BACE,uCAEF,4BACE,8CAKLkG,EAAOf,KAAI,SAACqB,GAAD,OACV,kBAAC,EAAD,CAAmBtD,IAAKoD,KACrBE,EAAMrB,KAAI,SAAClC,GAAD,OACT,kBAAC,EAAD,CACEC,IAAKD,EAAMC,IACXD,MAAOA,EACPD,cAAa,YAAE,EAAF,MACbK,eAAc,YAAE,EAAF,qBAvGhC,GAAkCV,IAAMC,eCOzB6D,OARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCEcmD,QACW,cAA7B/H,OAAOgI,SAASC,UAEe,UAA7BjI,OAAOgI,SAASC,UAEhBjI,OAAOgI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF/I,SAASgJ,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5J,QAAQ4J,MAAMA,EAAMC,c","file":"static/js/main.47cc6c04.chunk.js","sourcesContent":["// PUBLIC SECTION\nexport const GDriveStates = {\n  LOADING: \"loading\",\n  SIGNED_IN: \"signed_in\",\n  SIGNED_OUT: \"signed_out\",\n  FAILED: \"failed\",\n};\nObject.freeze(GDriveStates);\n\nclass GDriveAuthClient {\n  #state = GDriveStates.LOADING;\n  #stateListeners = new Set();\n\n  get state() {\n    return this.#state;\n  }\n\n  addStateListener(listener) {\n    console.assert(typeof listener == \"function\");\n    console.assert(listener.length === 1);\n    console.assert(!this.#stateListeners.has(listener));\n\n    this.#stateListeners.add(listener);\n  }\n\n  removeStateListener(listener) {\n    console.assert(typeof listener == \"function\");\n    console.assert(listener.length === 1);\n    console.assert(this.#stateListeners.has(listener));\n    this.#stateListeners.delete(listener);\n  }\n\n  async getNextStateForTests() {\n    return await new Promise((resolve) => {\n      let listener = (state) => {\n        this.removeStateListener(listener);\n        resolve(state);\n      };\n      this.addStateListener(listener);\n    });\n  }\n\n  constructor() {\n    loadGapi(async () => {\n      try {\n        if (!window.gapi) {\n          throw new Error(\"Failed loading GAPI\");\n        }\n\n        await new Promise((resolve) =>\n          window.gapi.load(\"client:auth2\", resolve)\n        );\n\n        await window.gapi.client.init({\n          clientId:\n            \"479709565206-4ek8a502261s9sussiehpa5v146ns2ku.apps.googleusercontent.com\",\n          discoveryDocs: [\n            \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\",\n          ],\n          scope: \"https://www.googleapis.com/auth/drive.appfolder\",\n        });\n\n        if (!isGapiLoaded()) {\n          throw new Error(\"Failed registering client_id.\");\n        }\n\n        this._updateSignInState();\n\n        window.gapi.auth2\n          .getAuthInstance()\n          .isSignedIn.listen(this._updateSignInState.bind(this));\n      } catch (error) {\n        console.log(error);\n        this.#state = GDriveStates.FAILED;\n        this._notifyStateChanged();\n        return;\n      }\n    });\n  }\n\n  signIn() {\n    console.assert(isGapiLoaded());\n    window.gapi.auth2.getAuthInstance().signIn();\n  }\n\n  signOut() {\n    console.assert(isGapiLoaded());\n    let auth_instance = window.gapi.auth2.getAuthInstance();\n    auth_instance.signOut();\n  }\n\n  _notifyStateChanged() {\n    for (let listener of this.#stateListeners) {\n      listener(this.#state);\n    }\n  }\n\n  _updateSignInState() {\n    console.assert(this.#state !== GDriveStates.FAILED);\n    let current_state = isSignedIn()\n      ? GDriveStates.SIGNED_IN\n      : GDriveStates.SIGNED_OUT;\n    if (this.#state !== current_state) {\n      this.#state = current_state;\n      this._notifyStateChanged();\n    }\n  }\n}\n\nexport const gdriveAuthClient = new GDriveAuthClient();\nObject.seal(gdriveAuthClient);\n\n// PRIVATE SECTION\nfunction loadGapi(ondone) {\n  console.assert(typeof ondone == \"function\");\n  console.assert(ondone.length === 0);\n  var script = document.createElement(\"script\");\n  script.async = true;\n  script.src = \"https://apis.google.com/js/api.js\";\n  document.body.appendChild(script);\n  script.onload = ondone;\n  script.onerror = ondone;\n}\n\nfunction isGapiLoaded() {\n  return window.gapi && window.gapi.auth2 && window.gapi.client;\n}\n\nfunction isSignedIn() {\n  console.assert(isGapiLoaded());\n  return window.gapi.auth2.getAuthInstance().isSignedIn.get();\n}\n","import React from 'react'\n\nexport default ({ active }) => (\n  <div style={{ marginRight: 10, background: active ? '#eee' : '#fff', padding: 10, borderRadius: 2 }}>\n    <svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g fill=\"#000\" fillRule=\"evenodd\">\n        <path\n          d=\"M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z\"\n          fill=\"#EA4335\"\n        />\n        <path d=\"M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.92l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.62z\" fill=\"#4285F4\" />\n        <path\n          d=\"M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z\"\n          fill=\"#FBBC05\"\n        />\n        <path\n          d=\"M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z\"\n          fill=\"#34A853\"\n        />\n        <path fill=\"none\" d=\"M0 0h18v18H0z\" />\n      </g>\n    </svg>\n  </div>\n)\n","import React from \"react\";\nimport Icon from \"./googleIcon\";\nimport { GDriveStates } from \"./GDriveAuthClient.js\";\nimport Popper from \"@material-ui/core/Popper\";\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\n\nconst ButtonContent = ({ children }) => (\n  <span\n    style={{\n      paddingRight: 10,\n      fontWeight: 500,\n      paddingLeft: 0,\n      paddingTop: 10,\n      paddingBottom: 10,\n    }}\n  >\n    {children}\n  </span>\n);\n\nlet buttonStyle = {\n  backgroundColor: \"#fff\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  color: \"rgba(0, 0, 0, .54)\",\n  boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, .24), 0 0 1px 0 rgba(0, 0, 0, .24)\",\n  padding: 0,\n  borderRadius: 2,\n  border: \"1px solid transparent\",\n  fontSize: 14,\n  fontWeight: \"500\",\n  fontFamily: \"Roboto, sans-serif\",\n  cursor: \"pointer\",\n};\n\nlet disabledStyle = {\n  opacity: 0.6,\n};\n\nexport class GoogleSignInButton extends React.PureComponent {\n  state = {\n    authState: this.props.gdriveAuthClient.state,\n    prevAuthState: this.props.gdriveAuthClient.LOADING,\n    buttonAnchor: null,\n  };\n\n  componentDidMount() {\n    if (this.state.authState !== this.props.gdriveAuthClient.state) {\n      this.#setAuthState(this.props.gdriveAuthClient.state);\n    }\n    this.props.gdriveAuthClient.addStateListener(this.#setAuthState);\n  }\n  componentWillUnmount() {\n    this.props.gdriveAuthClient.removeStateListener(this.#setAuthState);\n  }\n\n  #setAuthState = (authState) => {\n    this.setState((prevState) => {\n      return { ...prevState, prevAuthState: prevState.authState, authState };\n    });\n  };\n\n  #setButtonAnchor = (buttonAnchor) => {\n    this.setState((prevState) => {\n      return { ...prevState, buttonAnchor };\n    });\n  };\n\n  #getButtonStyle = () => {\n    if (\n      this.state.authState === GDriveStates.FAILED ||\n      this.state.authState === GDriveStates.LOADING\n    ) {\n      return Object.assign({}, buttonStyle, disabledStyle);\n    }\n\n    return buttonStyle;\n  };\n\n  #onClick = async () => {\n    if (this.state.authState === GDriveStates.SIGNED_IN) {\n      this.props.gdriveAuthClient.signOut();\n    } else if (this.state.authState === GDriveStates.SIGNED_OUT) {\n      this.props.gdriveAuthClient.signIn();\n    }\n  };\n\n  render() {\n    let alertElement = (() => {\n      if (this.state.authState === GDriveStates.FAILED) {\n        return (\n          <Alert severity=\"error\">\n            Failed connecting to google. Check your connection and try reloading\n            the page.\n          </Alert>\n        );\n      }\n\n      if (this.state.authState === GDriveStates.SIGNED_OUT) {\n        if (this.state.prevAuthState === GDriveStates.SIGNED_IN) {\n          return (\n            <Alert severity=\"warning\">\n              <AlertTitle>Privacy note!</AlertTitle>\n              If other people have access to this browser <br />\n              AND you don't want them to read your sheets: <br />\n              <ol>\n                <li>\n                  sign out globally: <br />\n                  <a href=\"https://accounts.google.com/Logout\">\n                    https://accounts.google.com/Logout\n                  </a>\n                </li>\n                <li>delete Google account password from the browser</li>\n              </ol>\n            </Alert>\n          );\n        } else if (this.state.prevAuthState === GDriveStates.LOADING) {\n          return (\n            <Alert severity=\"info\">\n              This site stores data in a hidden Google Drive folder. <br />\n              Sign in to proceed.\n              <br />\n            </Alert>\n          );\n        }\n      }\n    })();\n\n    return (\n      <button\n        ref={(ref) => this.#setButtonAnchor(ref)}\n        onClick={this.#onClick}\n        style={this.#getButtonStyle()}\n        type=\"button\"\n      >\n        <Icon key={0} active={this.state.active} />\n        <ButtonContent key={2}>\n          {this.state.authState === GDriveStates.SIGNED_IN\n            ? \"Sign Out\"\n            : \"Sign in with Google\"}\n        </ButtonContent>\n\n        <Popper\n          key={1}\n          open={!!alertElement && !!this.state.buttonAnchor}\n          anchorEl={this.state.buttonAnchor}\n          placement=\"left\"\n          disablePortal={false}\n          modifiers={{\n            flip: {\n              enabled: false,\n            },\n            preventOverflow: {\n              enabled: false,\n            },\n            hide: {\n              enabled: false,\n            },\n            offset: {\n              offset: \"0,5\",\n            },\n          }}\n        >\n          {alertElement}\n          <span className=\"arrow\" ref={this.handleArrowRef} />\n        </Popper>\n      </button>\n    );\n  }\n}\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport class Entry extends React.PureComponent {\n  #onLeftChanged = (event) => {\n    this.props.onLeftChanged(this.props.entry.key, event.target.value);\n  };\n  #onRightChanged = (event) => {\n    this.props.onRightChanged(this.props.entry.key, event.target.value);\n  };\n\n  render() {\n    return (\n      <tr>\n        <td key=\"issueElement\">\n          <h5>issue</h5>\n          <TextField\n            className=\"issueElement\"\n            fullWidth\n            multiline\n            placeholder=\"What bothers you?\"\n            variant=\"outlined\"\n            onChange={this.#onLeftChanged}\n            value={this.props.entry.left}\n          />\n        </td>\n\n        <td key=\"resolutionElement\">\n          <h5>resolution</h5>\n          <TextField\n            className=\"resolutionElement\"\n            fullWidth\n            multiline\n            placeholder=\"What can you do to resolve the problem?\"\n            variant=\"outlined\"\n            onChange={this.#onRightChanged}\n            value={this.props.entry.right}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n","import React from \"react\";\r\n\r\nexport class EntriesTableChunk extends React.PureComponent {\r\n  state = {\r\n    isVisible: !!this.props.isInitiallyVisible,\r\n    height: 60 * 30,\r\n  };\r\n\r\n  #containerRef = React.createRef();\r\n  #intersectionObserver = new IntersectionObserver(\r\n    (entries) => {\r\n      if (this.state.isVisible !== entries[0].isIntersecting) {\r\n        let height = this.state.isVisible\r\n          ? this.#containerRef.current.clientHeight\r\n          : this.state.height;\r\n\r\n        this.setState({\r\n          isVisible: entries[0].isIntersecting,\r\n          height,\r\n        });\r\n      }\r\n    },\r\n    {\r\n      threshold: [0, 0.25, 0.5, 0.75, 1],\r\n      rootMargin: \"200%\",\r\n    }\r\n  );\r\n\r\n  #onPlaceholderInteraction = () => {\r\n    this.setState({ ...this.state, isVisible: true });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.#intersectionObserver.observe(this.#containerRef.current);\r\n  }\r\n  componentWillUnmount() {\r\n    this.#intersectionObserver.unobserve(this.#containerRef.current);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tbody ref={this.#containerRef}>\r\n        {this.state.isVisible ? (\r\n          this.props.children\r\n        ) : (\r\n          <tr>\r\n            <td>\r\n              <div\r\n                className=\"placeholder\"\r\n                onMouseOver={this.#onPlaceholderInteraction}\r\n                onClick={this.#onPlaceholderInteraction}\r\n                style={{ height: this.state.height }}\r\n              />\r\n            </td>\r\n            <td>\r\n              <div\r\n                className=\"placeholder\"\r\n                onMouseOver={this.#onPlaceholderInteraction}\r\n                onClick={this.#onPlaceholderInteraction}\r\n                style={{ height: this.state.height }}\r\n              />\r\n            </td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { Entry } from \"./Entry.js\";\nimport { EntriesTableChunk } from \"./EntriesTableChunk.js\";\nimport Container from \"@material-ui/core/Container\";\nimport ColumnResizer from \"column-resizer\";\n\nimport _ from \"lodash\";\n\nexport class EntriesTable extends React.PureComponent {\n  state = {\n    entries: _.range(0, 1000).map((x) => {\n      return {\n        key: x,\n        left:\n          \"Lorem ipsum dolo'r sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n        right: x + \". О сколько нам открытий чудных готовит просвещенья дух?\",\n      };\n    }),\n  };\n\n  #tableRef = React.createRef();\n  #columnResizer = null;\n  #resizeObserver = null;\n\n  #onLeftChanged = (key, left) => {\n    this.setState({\n      ...this.state,\n      entries: this.state.entries.map((x) => {\n        if (x.key === key) return { ...x, left };\n        return x;\n      }),\n    });\n  };\n\n  #onRightChanged = (key, right) => {\n    this.setState({\n      ...this.state,\n      entries: this.state.entries.map((x) => {\n        if (x.key === key) return { ...x, right };\n        return x;\n      }),\n    });\n  };\n\n  componentDidMount() {\n    this.#columnResizer = new ColumnResizer(this.#tableRef.current, {\n      liveDrag: true,\n      minWidth: 100,\n      gripInnerHtml: \"<div class='grip'></div>\",\n      draggingClass: \"dragging\",\n      onResize: (e) => {\n        // TextArea adjusts its height only when the browser window\n        // resizes. It ignores resize of its parent.\n        // This logic is encapsulated badly, you cannot change\n        // it without modifying library sources.\n        //\n        // So, the esiest way of forcing TextArea height adjustment is\n        // to dispatch a window resize event hoping that it\n        // won't break anything.\n        window.dispatchEvent(new Event(\"resize\"));\n      },\n    });\n\n    // this.#columnResizer doesn't observe resizes of the table.\n    // It listens for browser window \"resize\" events instead.\n    // This doesn't play well when table content asynchronously adjusts\n    // its height listening for the same \"resize\" event.\n    window.removeEventListener(\"resize\", this.#columnResizer.onResize);\n    this.#resizeObserver = new ResizeObserver(\n      _.throttle(() => {\n        this.#columnResizer.onResize();\n      }, 200)\n    );\n    this.#resizeObserver.observe(this.#tableRef.current);\n  }\n\n  componentWillUnmount() {\n    this.#columnResizer.destroy();\n    this.#resizeObserver.unobserve(this.#tableRef.current);\n  }\n\n  render() {\n    const chunkSize = 30;\n    let chunks = [];\n    for (let i = 0; i < this.state.entries.length; i += chunkSize) {\n      chunks.push(this.state.entries.slice(i, i + chunkSize));\n    }\n\n    let chunkCounter = 0;\n\n    return (\n      <Container>\n        <table className=\"entriesTable\" ref={this.#tableRef}>\n          <thead>\n            <tr>\n              <th>\n                <div>issue</div>\n              </th>\n              <th>\n                <div>resolution</div>\n              </th>\n            </tr>\n          </thead>\n\n          {chunks.map((chunk) => (\n            <EntriesTableChunk key={chunkCounter++}>\n              {chunk.map((entry) => (\n                <Entry\n                  key={entry.key}\n                  entry={entry}\n                  onLeftChanged={this.#onLeftChanged}\n                  onRightChanged={this.#onRightChanged}\n                />\n              ))}\n            </EntriesTableChunk>\n          ))}\n        </table>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { gdriveAuthClient } from \"./GDriveAuthClient.js\";\nimport { GoogleSignInButton } from \"./GoogleSignInButton.js\";\nimport { EntriesTable } from \"./EntriesTable.js\";\nimport AppBar from \"@material-ui/core/AppBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EntriesTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}