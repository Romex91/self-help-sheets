{"version":3,"sources":["migrateEmoji.js","SettingsWindow.js"],"names":["migrateEmoji","entryTableModel","oldEmojiList","newEmojiList","a","Promise","resolve","subscribe","onEntriesUpdate","entries","unsubscribe","someValuesAreDeleted","newEntries","map","x","updatedEmojiArrays","emojiArrays","y","migrateEmojiValuesArray","some","setEmojiLeft","newArray","setEmojiRight","emojiValuesArray","oldEmojiValues","Map","i","length","set","codePoint","oldValue","get","push","find","MemoizedEmojiPicker","React","memo","Picker","useStyles","makeStyles","theme","emojiIcon","margin","fontSize","display","alignItems","paddingLeft","hintContainer","flexDirection","buttons","marginTop","justifyContent","input","backgroundColor","palette","background","paper","HintControl","props","classes","className","Typography","variant","label","FormControlLabel","value","control","Checkbox","checked","isEnabled","onChange","event","setIsEnabled","target","TextField","text","setText","multiline","SettingsWindow","useState","gdriveAuthClient","state","signInState","setSignInState","settings","setSettings","useEffect","addStateListener","onUpdate","oldSettings","model","onEmojiClick","useCallback","_event","emoji","codePointAt","names","emojiList","findIndex","alert","listClone","newSettings","setEmojiList","onSettingsUpdate","GDriveStates","SIGNED_OUT","CenteredTypography","LOADING","Fragment","Backdrop","invisible","open","CircularProgress","color","onDeleteEmoji","index","splice","window","confirm","forEach","entry","resetDefaults","Settings","consent","Grid","container","justify","spacing","item","xs","align","sm","leftHint","setLeftHint","rightHint","setRightHint","Divider","alignContent","key","Paper","String","fromCodePoint","IconButton","onClick","Delete","disableSkinTonePicker","disableAutoFocus","Button","onClose"],"mappings":"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","file":"static/js/4.fbf869eb.chunk.js","sourcesContent":["// Emoji values are stored as arrays of values in gdrive files description.\r\n// E.G.: 02003:31000. Each number is asociated with its index in\r\n// |settings.emojiList|.\r\n// This way it is compact and may be requested in single request in\r\n// |GRriveMap.getAllKeys|.\r\n// Such implementation is somewhat overcomlicated and require non-trivial\r\n// migration logic. This is the cost of fast mood charts.\r\n//\r\n// The funny thing is I've ran out of time and I am not going to implement\r\n// the mood charts anyway. All this logic is redundant. So, let it be a lesson for me.\r\nexport async function migrateEmoji(\r\n  entryTableModel,\r\n  oldEmojiList,\r\n  newEmojiList\r\n) {\r\n  // Some entries may be initially hidden. We should request data for them before proceeding.\r\n  const entries = await new Promise((resolve) => {\r\n    const onEntriesUpdate = (entries) => {\r\n      entryTableModel.unsubscribe(onEntriesUpdate);\r\n      resolve(entries);\r\n    };\r\n    entryTableModel.subscribe(onEntriesUpdate);\r\n  });\r\n\r\n  let someValuesAreDeleted = false;\r\n  const newEntries = entries.map((x) => {\r\n    const updatedEmojiArrays = x.emojiArrays.map((y) =>\r\n      migrateEmojiValuesArray(y, oldEmojiList, newEmojiList)\r\n    );\r\n\r\n    if (updatedEmojiArrays.some((y) => y.someValuesAreDeleted))\r\n      someValuesAreDeleted = true;\r\n\r\n    return x\r\n      .setEmojiLeft(updatedEmojiArrays[0].newArray)\r\n      .setEmojiRight(updatedEmojiArrays[1].newArray);\r\n  });\r\n\r\n  return { someValuesAreDeleted, newEntries };\r\n}\r\n\r\nfunction migrateEmojiValuesArray(emojiValuesArray, oldEmojiList, newEmojiList) {\r\n  const oldEmojiValues = new Map();\r\n  for (let i = 0; i < oldEmojiList.length; i++) {\r\n    oldEmojiValues.set(oldEmojiList[i].codePoint, emojiValuesArray[i]);\r\n  }\r\n\r\n  const newArray = [];\r\n  for (let i = 0; i < newEmojiList.length; i++) {\r\n    const oldValue = oldEmojiValues.get(newEmojiList[i].codePoint);\r\n    newArray.push(oldValue == null ? 0 : oldValue);\r\n  }\r\n\r\n  const someValuesAreDeleted = oldEmojiList.some(\r\n    (x) =>\r\n      oldEmojiValues.get(x.codePoint) > 0 &&\r\n      newEmojiList.find((y) => y.codePoint === x.codePoint) == null\r\n  );\r\n\r\n  return { newArray, someValuesAreDeleted };\r\n}\r\n","import React from \"react\";\nimport {\n  Backdrop,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Delete as DeleteIcon } from \"@material-ui/icons\";\nimport Picker from \"emoji-picker-react\";\n\nimport { gdriveAuthClient, GDriveStates } from \"./GDriveAuthClient\";\nimport { CenteredTypography } from \"./CenteredTypography\";\nimport { Settings } from \"./Settings\";\n\nimport { migrateEmoji } from \"./migrateEmoji\";\n\nconst MemoizedEmojiPicker = React.memo(Picker);\n\nconst useStyles = makeStyles((theme) => ({\n  emojiIcon: {\n    margin: \"0px 5px 5px 0px \",\n    fontSize: 20,\n    display: \"flex\",\n    alignItems: \"center\",\n    paddingLeft: 10,\n  },\n  hintContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  buttons: {\n    marginTop: 20,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  input: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nfunction HintControl(props) {\n  let classes = useStyles();\n\n  return (\n    <div className={classes.hintContainer}>\n      <Typography variant=\"h6\">{props.label + \":\"}</Typography>\n      <FormControlLabel\n        value=\"end\"\n        label=\"Enable popup\"\n        control={\n          <Checkbox\n            checked={props.value.isEnabled}\n            onChange={(event) => {\n              props.onChange(props.value.setIsEnabled(event.target.checked));\n            }}\n          ></Checkbox>\n        }\n      ></FormControlLabel>\n      <TextField\n        value={props.value.text}\n        onChange={(event) =>\n          props.onChange(props.value.setText(event.target.value))\n        }\n        className={classes.input}\n        variant=\"outlined\"\n        multiline\n      ></TextField>\n    </div>\n  );\n}\n\nexport default function SettingsWindow(props) {\n  const classes = useStyles();\n\n  const [signInState, setSignInState] = React.useState(gdriveAuthClient.state);\n  const [settings, setSettings] = React.useState(null);\n\n  React.useEffect(() => {\n    gdriveAuthClient.addStateListener(setSignInState);\n  }, []);\n\n  React.useEffect(() => {\n    let onUpdate = (entries, settings) => {\n      setSettings((oldSettings) => {\n        return oldSettings == null ? settings : oldSettings;\n      });\n    };\n\n    if (props.model != null) {\n      props.model.subscribe(onUpdate);\n    }\n\n    return () => {\n      if (props.model != null) {\n        props.model.unsubscribe(onUpdate);\n      }\n    };\n  }, [props.model]);\n\n  const onEmojiClick = React.useCallback(\n    (_event, emoji) => {\n      setSettings((oldSettings) => {\n        const codePoint = emoji.emoji.codePointAt(0);\n        const text =\n          emoji.names.length > 0 ? emoji.names[emoji.names.length - 1] : \"\";\n        if (\n          oldSettings.emojiList.findIndex((x) => x.codePoint === codePoint) !==\n          -1\n        ) {\n          alert(text + \" is already selected\");\n          return oldSettings;\n        } else {\n          const listClone = [...oldSettings.emojiList];\n          listClone.push({ codePoint, text });\n          const newSettings = oldSettings.setEmojiList(listClone);\n          props.model.onSettingsUpdate(newSettings);\n          setSettings(newSettings);\n        }\n      });\n    },\n    [props.model]\n  );\n\n  if (signInState === GDriveStates.SIGNED_OUT) {\n    return <CenteredTypography>Sign in to proceed...</CenteredTypography>;\n  } else if (\n    signInState === GDriveStates.LOADING ||\n    settings == null ||\n    props.model == null\n  ) {\n    return (\n      <React.Fragment>\n        <Backdrop invisible open={true}>\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n\n        <CenteredTypography>Loading...</CenteredTypography>\n      </React.Fragment>\n    );\n  }\n\n  const onDeleteEmoji = async (codePoint) => {\n    const listClone = [...settings.emojiList];\n    const index = listClone.findIndex((y) => y.codePoint === codePoint);\n    if (index === -1) return;\n    listClone.splice(index, 1);\n\n    const { someValuesAreDeleted, newEntries } = await migrateEmoji(\n      props.model,\n      settings.emojiList,\n      listClone\n    );\n\n    if (\n      someValuesAreDeleted &&\n      !window.confirm(\n        \"This will delete some moods from some of the entries. Are you sure?\"\n      )\n    ) {\n      return;\n    }\n\n    newEntries.forEach((entry) => {\n      props.model.onUpdate(entry);\n    });\n\n    const newSettings = settings.setEmojiList(listClone);\n    props.model.onSettingsUpdate(newSettings);\n    setSettings(newSettings);\n  };\n\n  const resetDefaults = async () => {\n    let newSettings = new Settings();\n\n    const { someValuesAreDeleted, newEntries } = await migrateEmoji(\n      props.model,\n      settings.emojiList,\n      newSettings.emojiList\n    );\n\n    let consent = someValuesAreDeleted\n      ? \"This will delete some moods from some entries. Reset settings?\"\n      : \"Reset settings?\";\n\n    if (window.confirm(consent)) {\n      newEntries.forEach((entry) => {\n        props.model.onUpdate(entry);\n      });\n      props.model.onSettingsUpdate(newSettings);\n      setSettings(newSettings);\n    }\n  };\n\n  return (\n    <Grid container justify=\"center\" spacing={2}>\n      <Grid item xs={12}>\n        <Typography variant=\"h4\" align=\"center\">\n          Settings\n        </Typography>\n      </Grid>\n\n      <Grid container item xs={12} spacing={2}>\n        <Grid item xs={12}>\n          <Typography variant=\"h5\">Helper questions</Typography>\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <HintControl\n            label=\"Left\"\n            value={settings.leftHint}\n            onChange={(value) => {\n              let newSettings = settings.setLeftHint(value);\n              props.model.onSettingsUpdate(newSettings);\n              setSettings(newSettings);\n            }}\n          ></HintControl>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <HintControl\n            label=\"Right\"\n            value={settings.rightHint}\n            onChange={(value) => {\n              let newSettings = settings.setRightHint(value);\n              props.model.onSettingsUpdate(newSettings);\n              setSettings(newSettings);\n            }}\n          ></HintControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Divider></Divider>\n        </Grid>\n      </Grid>\n\n      <Grid container item xs={12} spacing={2}>\n        <Grid item xs={12}>\n          <Typography variant=\"h5\">Moods</Typography>\n        </Grid>\n\n        <Grid\n          container\n          alignItems=\"flex-start\"\n          justify=\"flex-start\"\n          alignContent=\"flex-start\"\n          item\n          xs={12}\n          sm={6}\n        >\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">Active: </Typography>\n          </Grid>\n          {settings.emojiList.map((x) => (\n            <Grid item key={x.codePoint}>\n              <Paper className={classes.emojiIcon}>\n                <Typography>{String.fromCodePoint(x.codePoint)}</Typography>\n                <IconButton onClick={() => onDeleteEmoji(x.codePoint)}>\n                  <DeleteIcon></DeleteIcon>\n                </IconButton>\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <Typography variant=\"h6\">Add new:</Typography>\n          <MemoizedEmojiPicker\n            disableSkinTonePicker\n            disableAutoFocus\n            onEmojiClick={onEmojiClick}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.buttons}>\n          <Button color=\"secondary\" onClick={resetDefaults}>\n            Reset defaults\n          </Button>\n\n          <Button color=\"primary\" onClick={props.onClose}>\n            Close\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}