{"version":3,"sources":["migrateMoods.ts","SettingsWindow.tsx"],"names":["migrateMoods","entryTableModel","oldEmojiList","newEmojiList","a","Promise","resolve","subscribe","onEntriesUpdate","entries","unsubscribe","someValuesAreDeleted","newEntries","map","x","updatedMoodArrays","moodArrays","y","migrateMoodArray","some","setMoodsLeft","newMoods","setMoodsRight","moodArray","oldMoods","Map","i","length","set","codePoint","oldValue","get","push","find","MemoizedEmojiPicker","React","memo","Picker","useStyles","makeStyles","theme","emojiIcon","margin","fontSize","display","alignItems","paddingLeft","hintContainer","flexDirection","buttons","marginTop","justifyContent","input","backgroundColor","palette","background","paper","HintControl","props","classes","className","Typography","variant","label","FormControlLabel","value","control","Checkbox","checked","isEnabled","onChange","event","setIsEnabled","target","TextField","text","setText","multiline","SettingsWindow","useState","gdriveAuthClient","state","signInState","setSignInState","undefined","settings","setSettings","useEffect","addStateListener","onUpdate","oldSettings","model","onEmojiClick","useCallback","_event","emoji","codePointAt","names","emojiList","findIndex","alert","listClone","newSettings","setEmojiList","onSettingsUpdate","AuthStates","SIGNED_OUT","CenteredTypography","LOADING","LoadingPlaceholder","onDeleteEmoji","index","splice","assert","window","confirm","forEach","entry","resetDefaults","Settings","consent","Grid","container","justify","spacing","item","xs","align","sm","leftHint","setLeftHint","rightHint","setRightHint","Divider","alignContent","key","Paper","String","fromCodePoint","IconButton","onClick","Delete","disableSkinTonePicker","disableAutoFocus","Button","color","onClose"],"mappings":"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","file":"static/js/8.01ec5b33.chunk.js","sourcesContent":["import { EntriesTableModel } from \"./EntriesTableModel\";\r\nimport { EmojiItem } from \"./Settings\";\r\nimport { EntryModel } from \"./EntryModel\";\r\n\r\n// Mood data is stored as arrays of numbers in gdrive files description.\r\n// E.G.: 02003:31000. Each number is asociated with its index in\r\n// |settings.emojiList|.\r\n// This way it is compact and may be requested in single request in\r\n// |GRriveMap.getAllKeys|.\r\n// Such implementation is somewhat overcomlicated and require non-trivial\r\n// migration logic. This is the cost of fast mood charts.\r\n//\r\n// The funny thing is I've ran out of time and I am not going to implement\r\n// the mood charts anyway. All this logic is redundant. So, let it be a lesson for me.\r\nexport async function migrateMoods(\r\n  entryTableModel: EntriesTableModel,\r\n  oldEmojiList: EmojiItem[],\r\n  newEmojiList: EmojiItem[]\r\n): Promise<{ someValuesAreDeleted: boolean; newEntries: EntryModel[] }> {\r\n  const entries: EntryModel[] = await new Promise((resolve) => {\r\n    const onEntriesUpdate = (entries: EntryModel[]) => {\r\n      entryTableModel.unsubscribe(onEntriesUpdate);\r\n      resolve(entries);\r\n    };\r\n    entryTableModel.subscribe(onEntriesUpdate);\r\n  });\r\n\r\n  let someValuesAreDeleted = false;\r\n  const newEntries = entries.map((x) => {\r\n    const updatedMoodArrays = x.moodArrays.map((y) =>\r\n      migrateMoodArray(y, oldEmojiList, newEmojiList)\r\n    );\r\n\r\n    if (updatedMoodArrays.some((y) => y.someValuesAreDeleted))\r\n      someValuesAreDeleted = true;\r\n\r\n    return x\r\n      .setMoodsLeft(updatedMoodArrays[0].newMoods)\r\n      .setMoodsRight(updatedMoodArrays[1].newMoods);\r\n  });\r\n\r\n  return { someValuesAreDeleted, newEntries };\r\n}\r\n\r\nfunction migrateMoodArray(\r\n  moodArray: number[],\r\n  oldEmojiList: EmojiItem[],\r\n  newEmojiList: EmojiItem[]\r\n) {\r\n  const oldMoods = new Map();\r\n  for (let i = 0; i < oldEmojiList.length; i++) {\r\n    oldMoods.set(oldEmojiList[i].codePoint, moodArray[i]);\r\n  }\r\n\r\n  const newMoods = [];\r\n  for (let i = 0; i < newEmojiList.length; i++) {\r\n    const oldValue = oldMoods.get(newEmojiList[i].codePoint);\r\n    newMoods.push(oldValue == null ? 0 : oldValue);\r\n  }\r\n\r\n  const someValuesAreDeleted = oldEmojiList.some(\r\n    (x) =>\r\n      oldMoods.get(x.codePoint) > 0 &&\r\n      newEmojiList.find((y) => y.codePoint === x.codePoint) == null\r\n  );\r\n\r\n  return { newMoods, someValuesAreDeleted };\r\n}\r\n","import React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { Delete as DeleteIcon } from \"@material-ui/icons\";\nimport Picker from \"emoji-picker-react\";\n\nimport { gdriveAuthClient } from \"./GDriveAuthClient\";\nimport { CenteredTypography } from \"./CenteredTypography\";\nimport { Settings, Hint } from \"./Settings\";\nimport { LoadingPlaceholder } from \"./LoadingPlaceholder\";\n\nimport { migrateMoods } from \"./migrateMoods\";\nimport {\n  EntriesSubscriptionCallback,\n  EntriesTableModel,\n} from \"./EntriesTableModel\";\nimport assert from \"assert\";\nimport { AuthStates } from \"./AuthClient\";\n\nconst MemoizedEmojiPicker = React.memo(Picker);\n\nconst useStyles = makeStyles((theme) => ({\n  emojiIcon: {\n    margin: \"0px 5px 5px 0px \",\n    fontSize: 20,\n    display: \"flex\",\n    alignItems: \"center\",\n    paddingLeft: 10,\n  },\n  hintContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  buttons: {\n    marginTop: 20,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  input: {\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\ninterface HintControlProps {\n  value: Hint;\n  label: string;\n  onChange(chanedValue: Hint): void;\n}\n\nfunction HintControl(props: HintControlProps) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.hintContainer}>\n      <Typography variant=\"h6\">{props.label + \":\"}</Typography>\n      <FormControlLabel\n        value=\"end\"\n        label=\"Enable popup\"\n        control={\n          <Checkbox\n            checked={props.value.isEnabled}\n            onChange={(event) => {\n              props.onChange(props.value.setIsEnabled(event.target.checked));\n            }}\n          ></Checkbox>\n        }\n      ></FormControlLabel>\n      <TextField\n        value={props.value.text}\n        onChange={(event) =>\n          props.onChange(props.value.setText(event.target.value))\n        }\n        className={classes.input}\n        variant=\"outlined\"\n        multiline\n      ></TextField>\n    </div>\n  );\n}\n\ninterface SettingsWindowProps {\n  model?: EntriesTableModel;\n  onClose?(): void;\n}\nexport default function SettingsWindow(\n  props: SettingsWindowProps\n): JSX.Element {\n  const classes = useStyles();\n\n  const [signInState, setSignInState] = React.useState(gdriveAuthClient.state);\n  const [settings, setSettings] = React.useState<Settings | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    gdriveAuthClient.addStateListener(setSignInState);\n  }, []);\n\n  React.useEffect(() => {\n    const onUpdate: EntriesSubscriptionCallback = (entries, settings) => {\n      setSettings((oldSettings) => {\n        return oldSettings == undefined ? settings : oldSettings;\n      });\n    };\n\n    if (props.model != undefined) {\n      props.model.subscribe(onUpdate);\n    }\n\n    return () => {\n      if (props.model != undefined) {\n        props.model.unsubscribe(onUpdate);\n      }\n    };\n  }, [props.model]);\n\n  const onEmojiClick = React.useCallback(\n    (_event, emoji) => {\n      setSettings((oldSettings?: Settings) => {\n        if (!oldSettings) return oldSettings;\n        const codePoint = emoji.emoji.codePointAt(0);\n        const text =\n          emoji.names.length > 0 ? emoji.names[emoji.names.length - 1] : \"\";\n        if (\n          oldSettings.emojiList.findIndex((x) => x.codePoint === codePoint) !==\n          -1\n        ) {\n          alert(text + \" is already selected\");\n          return oldSettings;\n        } else {\n          const listClone = [...oldSettings.emojiList];\n          listClone.push({ codePoint, text });\n          const newSettings = oldSettings.setEmojiList(listClone);\n          props.model?.onSettingsUpdate(newSettings);\n          setSettings(newSettings);\n        }\n      });\n    },\n    [props.model]\n  );\n\n  if (signInState === AuthStates.SIGNED_OUT) {\n    return <CenteredTypography>Sign in to proceed...</CenteredTypography>;\n  } else if (\n    signInState === AuthStates.LOADING ||\n    settings == null ||\n    props.model == null\n  ) {\n    return <LoadingPlaceholder />;\n  }\n\n  const onDeleteEmoji = async (codePoint: number) => {\n    const listClone = [...settings.emojiList];\n    const index = listClone.findIndex((y) => y.codePoint === codePoint);\n    if (index === -1) return;\n    listClone.splice(index, 1);\n\n    assert(props.model);\n    const { someValuesAreDeleted, newEntries } = await migrateMoods(\n      props.model,\n      settings.emojiList,\n      listClone\n    );\n\n    if (\n      someValuesAreDeleted &&\n      !window.confirm(\n        \"This will delete some moods from some of the entries. Are you sure?\"\n      )\n    ) {\n      return;\n    }\n\n    newEntries.forEach((entry) => {\n      props.model?.onUpdate(entry, true);\n    });\n\n    const newSettings = settings.setEmojiList(listClone);\n    props.model.onSettingsUpdate(newSettings);\n    setSettings(newSettings);\n  };\n\n  const resetDefaults = async () => {\n    const newSettings = new Settings(\"\");\n\n    assert(props.model);\n    const { someValuesAreDeleted, newEntries } = await migrateMoods(\n      props.model,\n      settings.emojiList,\n      newSettings.emojiList\n    );\n\n    const consent = someValuesAreDeleted\n      ? \"This will delete some moods from some entries. Reset settings?\"\n      : \"Reset settings?\";\n\n    if (window.confirm(consent)) {\n      newEntries.forEach((entry) => {\n        props.model?.onUpdate(entry, true);\n      });\n      props.model.onSettingsUpdate(newSettings);\n      setSettings(newSettings);\n    }\n  };\n\n  return (\n    <Grid container justify=\"center\" spacing={2}>\n      <Grid item xs={12}>\n        <Typography variant=\"h4\" align=\"center\">\n          Settings\n        </Typography>\n      </Grid>\n\n      <Grid container item xs={12} spacing={2}>\n        <Grid item xs={12}>\n          <Typography variant=\"h5\">Helper questions</Typography>\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <HintControl\n            label=\"Left\"\n            value={settings.leftHint}\n            onChange={(value) => {\n              const newSettings = settings.setLeftHint(value);\n              props.model?.onSettingsUpdate(newSettings);\n              setSettings(newSettings);\n            }}\n          ></HintControl>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <HintControl\n            label=\"Right\"\n            value={settings.rightHint}\n            onChange={(value) => {\n              const newSettings = settings.setRightHint(value);\n              props.model?.onSettingsUpdate(newSettings);\n              setSettings(newSettings);\n            }}\n          ></HintControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Divider></Divider>\n        </Grid>\n      </Grid>\n\n      <Grid container item xs={12} spacing={2}>\n        <Grid item xs={12}>\n          <Typography variant=\"h5\">Moods</Typography>\n        </Grid>\n\n        <Grid\n          container\n          alignItems=\"flex-start\"\n          justify=\"flex-start\"\n          alignContent=\"flex-start\"\n          item\n          xs={12}\n          sm={6}\n        >\n          <Grid item xs={12}>\n            <Typography variant=\"h6\">Active: </Typography>\n          </Grid>\n          {settings.emojiList.map((x) => (\n            <Grid item key={x.codePoint}>\n              <Paper className={classes.emojiIcon}>\n                <Typography>{String.fromCodePoint(x.codePoint)}</Typography>\n                <IconButton onClick={() => onDeleteEmoji(x.codePoint)}>\n                  <DeleteIcon></DeleteIcon>\n                </IconButton>\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <Typography variant=\"h6\">Add new:</Typography>\n          <MemoizedEmojiPicker\n            disableSkinTonePicker\n            disableAutoFocus\n            onEmojiClick={onEmojiClick}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.buttons}>\n          <Button color=\"secondary\" onClick={resetDefaults}>\n            Reset defaults\n          </Button>\n\n          <Button color=\"primary\" onClick={props.onClose}>\n            Close\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}